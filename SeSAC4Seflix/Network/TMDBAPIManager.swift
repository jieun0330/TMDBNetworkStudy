//
//  TMDBAPIManager.swift
//  SeSAC4Seflix
//
//  Created by Î∞ïÏßÄÏùÄ on 1/30/24.
//

import Foundation
import Alamofire

class TMDBAPIManager {
    
    func request<T: Decodable>(type: T.Type, api: TMDBAPI, completionHandler: @escaping ((T) -> Void)) {
        
        // url Ï£ºÏÜåÎèÑ ÏïÑÎûòÍ∫ºÎûë 3ÍπåÏßÄÎäî ÎòëÍ∞ôÏùå
//        let url = "\(baseURL)trending/movie/week?language=ko-KR"
        
        
        // parmaeters: HTTP Body, Query String
        AF
            .request(api.endpoint,
                     method: api.method,
                     parameters: api.parameter,
                     // ???: Í≤ÄÏÉâÌïòÎäîÍ±∞ÎãàÍπå encodingÏù¥ ÌïÑÏöîÌïúÍ≤ÉÍ∞ôÎã§
                     encoding: URLEncoding(destination: .queryString),
                     headers: api.header)
            .responseDecodable(of: T.self) { response in
                switch response.result {
                case .success(let success):
                    print("success", success)
                    
                    completionHandler(success) // ÌÅ¥Î°úÏ†Ä ÏïàÏóê ÌÅ¥Î°úÏ†ÄÏóê ÏûàÎäîÍ±∏ Í∫ºÎÇ¥Í∏∞ ÏúÑÌï¥ÏÑúÎäî @escaping
                    
                case .failure(let failure):
                    print("fail", failure)
                }
            }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    // Ïã±Í∏ÄÌÜ§
    static let shared = TMDBAPIManager()
    // ÏïÑÎûò Î©îÏÑúÎìú ÏïàÏóê ÏûàÎäî HeaderÎûë Î∞òÎ≥µÎêòÎãàÍπå ÌïòÎÇòÎ°ú Ìï©ÏπòÎäî ÏûëÏóÖÏùÑ Ìï¥Î≥¥Ïûê
    let header: HTTPHeaders = ["Authorization": APIKey.tmdb]
    let baseURL = "https://api.themoviedb.org/3/"
    
    
    
    // Î∞ëÏóêÍ∫ºÎûë ÎòëÍ∞ôÏùå
//    func searchMovie(query: String, completionHandler: @escaping ([Movie]) -> Void) {
//    func searchMovie(api: TMDBAPI, completionHandler: @escaping ([Movie]) -> Void) {

        
//        let url = baseURL + "search/movie?language=ko-KR&query=\(query)"
        
        // Í∞íÏùÑ ÌôïÏù∏ÌñàÏúºÎãàÍπå ÏõêÎûò ÏÉÅÌÉú ÏΩîÎìúÎ°ú,,?
        //        AF
        //            .request(url, headers: header)
        //            // ÏãùÌåêÏóê Îã¥ÎäîÍ≤å ÏïÑÎãàÎùº Î¨∏ÏûêÏó¥ Í∑∏ÎåÄÎ°ú Ïûò Ïò§ÎäîÏßÄ ÌôïÏù∏ÌïòÎäî ÏΩîÎìú
        //            .responseString { response in
        //                print(response)
        //                print(response.result)
        //            }
//        
//        AF
//            .request(api.endpoint,
//                     method: api.method,
//                     parameters: api.parameter,
//                     encoding: URLEncoding(destination: .queryString),
//                     headers: api.header)
//            .responseDecodable(of: TrendingModel.self) { response in
//                switch response.result {
//                case .success(let success):
//                    print("success", success)
//                    
//                    completionHandler(success.results) // ÌÅ¥Î°úÏ†Ä ÏïàÏóê ÌÅ¥Î°úÏ†ÄÏóê ÏûàÎäîÍ±∏ Í∫ºÎÇ¥Í∏∞ ÏúÑÌï¥ÏÑúÎäî @escaping
//                    
//                case .failure(let failure):
//                    print("fail", failure)
//                }
//            }
//    }
    
    /*
     completionhanlerÏóêÏÑú ÏÑ±Í≥µÌñàÏùÑÎïåÎßå ÌïòÍ≥†ÏûàÎäîÎç∞
     Ïã§Ìå®ÌñàÏùÑÎïåÎèÑ completionhanlerÎ•º ÌÉà Ïàò ÏûàÍ≤å ÎßåÎì†Îã§
     */
    
    // üö®üö®üö®üö®üö®
    // DispatchGroup ÏΩîÎìúÏóêÏÑú Î∞úÏÉùÌï† Ïàò ÏûàÎäî Î¨∏Ï†ú?
    // Ïã§Ìå® ÏºÄÏù¥Ïä§Ïóê ÎåÄÌï¥ÏÑúÎèÑ completionHandler ÌïÑÏöî! (ex. toast)
    // completionHandlerÎ•º 2Í∞ú ÎßåÎì§ÏßÄ, Îß§Í∞úÎ≥ÄÏàòÎ•º 2Í∞ú ÏÉùÏÑ±Ìï† ÏßÄ
    // ÎßåÏïΩ Îß§Í∞úÎ≥ÄÏàò 2Í∞úÎ°ú ÏÉùÏÑ±ÌïúÎã§Î©¥, Ïôú ÏòµÏÖîÎÑêÏù¥Ïñ¥ÏïºÎßå ÌïòÎäîÏßÄ -> ÏòµÏÖîÎÑêÏù¥ ÏïÑÎãàÎ©¥ Ïñ¥ÎñªÍ≤å ÎêòÎäîÏßÄ
    
    
    
    // Ïù¥ Î©îÏÑúÎìú ÏïàÏóêÏÑúÎäî Î™®Îì† Í∞íÏùÑ Î¶¨ÌÑ¥ÏùÑ Ìï¥Ïïº ÌïòÍ∏∞ ÎïåÎ¨∏Ïóê returnÏúºÎ°ú ÌïòÍ∏∞ Ïñ¥Î†µÎã§ ?
    func fetchMovie(api: TMDBAPI,
                    // Ìï∏Îì§Îü¨Î•º ÎëêÍ∞ú Ïì∞Í∏∞ Í∑ÄÏ∞ÆÏïÑÏÑú ÏòµÏÖîÎÑê Ï≤òÎ¶¨Î°ú ÎëêÍ∞úÎ•º Î∂ôÏó¨Ï§ÄÎã§
                    completionHandler: @escaping (([Movie]?, AFError?) -> Void)) {
        
        // url Ï£ºÏÜåÎèÑ ÏïÑÎûòÍ∫ºÎûë 3ÍπåÏßÄÎäî ÎòëÍ∞ôÏùå
//        let url = "\(baseURL)trending/movie/week?language=ko-KR"
        
        // parmaeters: HTTP Body, Query String
        AF
            .request(api.endpoint, // url
                     method: api.method, 
                     parameters: api.parameter,
                     // ???: Í≤ÄÏÉâÌïòÎäîÍ±∞ÎãàÍπå encodingÏù¥ ÌïÑÏöîÌïúÍ≤ÉÍ∞ôÎã§
                     encoding: URLEncoding(destination: .queryString),
                     headers: api.header)
            .responseDecodable(of: TrendingModel.self) { response in
                switch response.result {
                case .success(let success):
                    print("success", success)
                    
                    // ÏÑ±Í≥µÌñàÎã§Î©¥ -> ÏóêÎü¨Í∞Ä ÏóÜÎã§Îäî ÏùòÎØ∏ÎãàÍπå ->  nil
                    // ÏóêÎü¨Î•º Ï†ÑÎã¨Ìï¥Ï§Ñ ÌïÑÏöîÍ∞Ä ÏóÜÎã§
                    completionHandler(success.results, nil) // ÌÅ¥Î°úÏ†Ä ÏïàÏóê ÌÅ¥Î°úÏ†ÄÏóê ÏûàÎäîÍ±∏ Í∫ºÎÇ¥Í∏∞ ÏúÑÌï¥ÏÑúÎäî @escaping
                    
                case .failure(let failure):
                    print("fail", failure)
                    // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïã§Ìå®ÌñàÏùÑ Í≤ΩÏö∞ -> movie dataÎ•º Ï†ÑÎã¨Ìï¥Ï§Ñ Ïàò ÏóÜÏúºÎãàÍπå nil
                    completionHandler(nil, failure)
                    // Ïã§Ìå®ÌñàÏùÑ Îïå alertÎÇò toast messageÎ•º Ïôú Î™ªÎùÑÏö∏Íπå? -> Ïù¥Í±∏ ÎùÑÏö∞Í∏∞ ÏúÑÌï¥ÏÑ† Î∑∞Í∞Ä ÏûàÏñ¥Ïïº ÌïòÎäîÎç∞, ÎùÑÏö∏ Ïàò ÏûàÎäî Ï°¥Ïû¨Îäî Î∑∞Ïª®Î∞ñÏóê ÏóÜÎã§
                    // Í∑∏ÎûòÏÑú Present Í∞ôÏùÄ ÏöîÏÜåÎ•º Î∂ÄÎ•º ÏàòÍ∞Ä ÏóÜÎã§
                    // -> completionhandlerÍ∞Ä ÌïòÎÇòÎßå ÏûàÏúºÎùºÎäî Î≤ïÏùÄ ÏóÜÎã§, ÌïòÎÇò Îçî ÎßåÎì§Í≤†Îã§
                }
            }
    }
    
    // Ïù∏Ïä§ÌÑ¥Ïä§ Î©îÏÑúÎìú
    func fetchMovieImages(api: TMDBAPI, completionHandler: @escaping (PosterModel) -> Void) {
//        let url = "\(baseURL)movie/\(id)/images"
        
        AF
            .request(api.endpoint, headers: header)
            .responseDecodable(of: PosterModel.self) { response in
                switch response.result {
                case .success(let success):
                    
                    // ???: 
                    completionHandler(success)
                case .failure(let failure):
                    print("fail", failure)
                }
            }
    }
}
